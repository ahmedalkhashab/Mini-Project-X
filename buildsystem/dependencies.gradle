ext {

    //app

    //get Ci build number, this will be only available when build is running in BitBucket pipeline
    bitbucketBuildNumber = System.getenv("BITBUCKET_BUILD_NUMBER")
    app_default_version_code = 1
    app_version_code = bitbucketBuildNumber != null ? bitbucketBuildNumber.toInteger() : app_default_version_code

    //Android
    androidBuildToolsVersion = "29.0.2"
    androidMinSdkVersion = 23
    androidTargetSdkVersion = 29
    androidCompileSdkVersion = 29

    //Libraries
    rxKotlinVersion = '2.4.0'
    fragmentKtxVersion = '1.2.3'
    javaxAnnotationVersion = '1.3.2'
    javaxInjectVersion = '1'
    moshiVersion = '1.9.3'
    okHttpVersion = '4.3.1'
    retrofitVersion = '2.7.1'
    retrofitMoshiConverterVersion = '2.4.0'

    androidxAnnotationsVersion = '1.1.0'
    ktxVersion = '1.2.0'
    preferenceKtxVersion = '1.1.0'
    lifecycleVersion = '2.2.0'
    roomVersion = '2.2.3'
    rxAndroidVersion = '2.1.1'
    securityCryptoVersion = '1.0.0-beta01'
    appcompatVersion = '1.1.0'
    recyclerviewVersion = '1.1.0'
    constraintlayoutVersion = '1.1.3'
    materialVersion = '1.1.0-rc02'
    navVersion = '2.3.0-alpha03'
    legacyVersion = '1.0.0'

    firebaseConfigVersion = '19.1.4'
    firebaseMessagingVersion = '20.1.7'
    firebaseAnalyticsVersion = '17.4.1'
    daggerVersion = '2.27'
    timberVersion = '4.7.1'
    glideVersion = '4.11.0'
    alerterVersion = '5.1.2'
    mlFirebaseVersion = "21.0.0"
    cameraxVersion = "1.0.0-alpha03"

    //Testing
    jUnitVersion = '4.13'
    assertJVersion = '3.15.0'
    mockitoVersion = '2.2.0'
    mockitoAndroidVersion = '2.23.4' // next versions throw
    // "java.lang.IllegalStateException:
    // Could not initialize plugin:
    // interface org.mockito.plugins.MockMaker (alternate: null)"
    // when run unit tests files of package "io.android.projectx.presentation.features"
    // under "test" path
    // module: "presentation"
    // Note that you should use Mockito 2.6+ to get native support for Android.

    robolectricVersion = '4.3.1'
    archVersion = '2.1.0'
    espressoVersion = '3.2.0'
    androidxTestCoreVersion = '1.2.0'
    runnerVersion = '1.2.0'

    domainDependencies = [
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin       : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
            //extensions
            moshi          : "com.squareup.moshi:moshi:${moshiVersion}"
    ]

    domainTestDependencies = [
            junit  : "junit:junit:${jUnitVersion}",
            mockito: "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            assertj: "org.assertj:assertj-core:${assertJVersion}"
    ]

    dataDependencies = [
            javaxAnnotation       : "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject           : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin              : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin                : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
            //dagger
            dagger                : "com.google.dagger:dagger:${daggerVersion}",
            daggerCompiler        : "com.google.dagger:dagger-compiler:${daggerVersion}",
            daggerAndroid         : "com.google.dagger:dagger-android:${daggerVersion}",
            daggerAndroidSupport  : "com.google.dagger:dagger-android-support:${daggerVersion}",
            daggerAndroidProcessor: "com.google.dagger:dagger-android-processor:${daggerVersion}",
            //
            timber                : "com.jakewharton.timber:timber:${timberVersion}",
    ]

    dataTestDependencies = [
            junit      : "junit:junit:${jUnitVersion}",
            kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            mockito    : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            assertj    : "org.assertj:assertj-core:${assertJVersion}",
    ]

    remoteDependencies = [
            okHttp           : "com.squareup.okhttp3:okhttp:${okHttpVersion}",
            okHttpLogger     : "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}",
            retrofit         : "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitConverter: "com.squareup.retrofit2:converter-moshi:${retrofitMoshiConverterVersion}",
            retrofitAdapter  : "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}",
            moshi            : "com.squareup.moshi:moshi:${moshiVersion}",
            moshiAdapters    : "com.squareup.moshi:moshi-adapters:${moshiVersion}",
            moshiKotlin      : "com.squareup.moshi:moshi-kotlin:${moshiVersion}",
            moshiCodegen     : "com.squareup.moshi:moshi-kotlin-codegen:${moshiVersion}"
    ]

    remoteTestDependencies = []

    cacheDependencies = [
            androidxCoreKtx: "androidx.core:core-ktx:${ktxVersion}",
            roomRuntime    : "androidx.room:room-runtime:${roomVersion}",
            roomCompiler   : "androidx.room:room-compiler:${roomVersion}",
            roomRxJava     : "androidx.room:room-rxjava2:${roomVersion}"
    ]

    cacheTestDependencies = [
            robolectric     : "org.robolectric:robolectric:${robolectricVersion}",
            roomTesting     : "androidx.room:room-testing:${roomVersion}",
            archTesting     : "androidx.arch.core:core-testing:${archVersion}",
            androidxTestCore: "androidx.test:core:${androidxTestCoreVersion}",
    ]

    presentationDependencies = [
            javaxAnnotation       : "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject           : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin              : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin                : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
            rxAndroid             : "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}",
            androidxCoreKtx       : "androidx.core:core-ktx:${ktxVersion}",
            androidxAnnotations   : "androidx.annotation:annotation:${androidxAnnotationsVersion}",
            lifecycleRuntime      : "androidx.lifecycle:lifecycle-runtime:${lifecycleVersion}",
            lifecycleExtensions   : "androidx.lifecycle:lifecycle-extensions:${lifecycleVersion}",
            lifecycleCompiler     : "androidx.lifecycle:lifecycle-compiler:${lifecycleVersion}",
            lifecycleViewmodel    : "androidx.lifecycle:lifecycle-viewmodel:${lifecycleVersion}",
            lifecycleLivedata     : "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycleVersion}",
            fragmentKtx           : "androidx.fragment:fragment-ktx:${fragmentKtxVersion}",
            roomRuntime           : "androidx.room:room-runtime:${roomVersion}",
            roomCompiler          : "androidx.room:room-compiler:${roomVersion}",
            roomRxJava            : "androidx.room:room-rxjava2:${roomVersion}",
            legacyV4              : "androidx.legacy:legacy-support-v4:${legacyVersion}",
            legacyV13             : "androidx.legacy:legacy-support-v13:${legacyVersion}",
            appCompat             : "androidx.appcompat:appcompat:${appcompatVersion}",
            recyclerView          : "androidx.recyclerview:recyclerview:${recyclerviewVersion}",
            constraintlayout      : "androidx.constraintlayout:constraintlayout:${constraintlayoutVersion}",
            preferenceKtx         : "androidx.preference:preference-ktx:${preferenceKtxVersion}",
            material              : "com.google.android.material:material:${materialVersion}",
            navigationFragmentKtx : "androidx.navigation:navigation-fragment-ktx:${navVersion}",
            navigationUiKtx       : "androidx.navigation:navigation-ui-ktx:${navVersion}",
            // Dynamic Feature Module Support
            navigationDynamic     : "androidx.navigation:navigation-dynamic-features-fragment:${navVersion}",
            securityCrypto        : "androidx.security:security-crypto:${securityCryptoVersion}",

            firebaseConfig        : "com.google.firebase:firebase-config-ktx:${firebaseConfigVersion}",
            firebaseMessaging     : "com.google.firebase:firebase-messaging:${firebaseMessagingVersion}",
            firebaseAnalytics     : "com.google.firebase:firebase-analytics:${firebaseAnalyticsVersion}",

            dagger                : "com.google.dagger:dagger:${daggerVersion}",
            daggerCompiler        : "com.google.dagger:dagger-compiler:${daggerVersion}",
            daggerAndroid         : "com.google.dagger:dagger-android:${daggerVersion}",
            daggerAndroidSupport  : "com.google.dagger:dagger-android-support:${daggerVersion}",
            daggerAndroidProcessor: "com.google.dagger:dagger-android-processor:${daggerVersion}",
            timber                : "com.jakewharton.timber:timber:${timberVersion}",
            glide                 : "com.github.bumptech.glide:glide:${glideVersion}",
            alerter               : "com.tapadoo.android:alerter:${alerterVersion}",

            okHttp                : "com.squareup.okhttp3:okhttp:${okHttpVersion}",
            okHttpLogger          : "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}",
            moshi                 : "com.squareup.moshi:moshi:${moshiVersion}",

            // Firebase ML Kit dependencies
            firebaseMlVision      : "com.google.firebase:firebase-ml-vision:${mlFirebaseVersion}",
            // CameraX
            cameraCore            : "androidx.camera:camera-core:${cameraxVersion}",
            cameraCamera2         : "androidx.camera:camera-camera2:${cameraxVersion}"
    ]

    presentationTestDependencies = [
            junit            : "junit:junit:${jUnitVersion}",
            kotlinJUnit      : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            assertj          : "org.assertj:assertj-core:${assertJVersion}",
            mockito          : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            mockitoAndroid   : "org.mockito:mockito-android:${mockitoAndroidVersion}",
            robolectric      : "org.robolectric:robolectric:${robolectricVersion}",
            archTesting      : "androidx.arch.core:core-testing:${archVersion}",
            espressoCore     : "androidx.test.espresso:espresso-core:${espressoVersion}",
            espressoIntents  : "androidx.test.espresso:espresso-intents:${espressoVersion}",
            espressoContrib  : "androidx.test.espresso:espresso-contrib:${espressoVersion}",
            androidxRunner   : "androidx.test:runner:${runnerVersion}",
            androidxRules    : "androidx.test:rules:${runnerVersion}",
            // Testing Navigation
            navigationtesting: "androidx.navigation:navigation-testing:${navVersion}"
    ]

}