ext {

    //Android
    androidBuildToolsVersion = "29.0.2"
    androidMinSdkVersion = 23
    androidTargetSdkVersion = 29
    androidCompileSdkVersion = 29

    //Libraries
    rxKotlinVersion = '2.4.0'
    javaxAnnotationVersion = '1.3.2'
    javaxInjectVersion = '1'
    gsonVersion = '2.8.6'
    okHttpVersion = '4.3.1'
    retrofitVersion = '2.7.1'
    androidxAnnotationsVersion = '1.1.0'
    ktxVersion = '1.2.0'
    lifecycleVersion = '2.2.0'
    roomVersion = '2.2.3'
    daggerVersion = '2.11' // todo - look again
    rxAndroidVersion = '2.1.1'
    appcompatVersion = '1.1.0'
    recyclerviewVersion = '1.1.0'
    constraintlayoutVersion = '1.1.3'
    materialVersion = '1.1.0-rc02'
    legacyVersion = '1.0.0'
    timberVersion = '4.7.1'
    glideVersion = '4.11.0'

    //Testing
    jUnitVersion = '4.13'
    assertJVersion = '3.15.0'
    mockitoVersion = '2.2.0'
    mockitoAndroidVersion = '2.23.4' // next versions throw
                // "java.lang.IllegalStateException:
                // Could not initialize plugin:
                // interface org.mockito.plugins.MockMaker (alternate: null)"
                // when run unit tests files of package "io.android.projectx.presentation.features"
                // under "test" path
                // module: "presentation"
                // Note that you should use Mockito 2.6+ to get native support for Android.

    robolectricVersion = '4.3.1'
    archVersion = '2.1.0'
    espressoVersion = '3.2.0'
    androidxTestCoreVersion = '1.2.0'
    runnerVersion = '1.2.0'

    domainDependencies = [
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin       : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
    ]

    domainTestDependencies = [
            junit  : "junit:junit:${jUnitVersion}",
            mockito: "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            assertj: "org.assertj:assertj-core:${assertJVersion}"
    ]

    dataDependencies = [
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin       : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
    ]

    dataTestDependencies = [
            junit      : "junit:junit:${jUnitVersion}",
            kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            mockito    : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            assertj    : "org.assertj:assertj-core:${assertJVersion}",
    ]

    remoteDependencies = [
            gson             : "com.google.code.gson:gson:${gsonVersion}",
            rxKotlin         : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin           : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",
            javaxAnnotation  : "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject      : "javax.inject:javax.inject:${javaxInjectVersion}",
            okHttp           : "com.squareup.okhttp3:okhttp:${okHttpVersion}",
            okHttpLogger     : "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}",
            retrofit         : "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitConverter: "com.squareup.retrofit2:converter-gson:${retrofitVersion}",
            retrofitAdapter  : "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    ]

    remoteTestDependencies = [
            junit      : "junit:junit:${jUnitVersion}",
            kotlinJUnit: "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            mockito    : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            assertj    : "org.assertj:assertj-core:${assertJVersion}",
    ]

    cacheDependencies = [
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin       : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
            androidxCoreKtx: "androidx.core:core-ktx:${ktxVersion}",
            roomRuntime    : "androidx.room:room-runtime:${roomVersion}",
            roomCompiler   : "androidx.room:room-compiler:${roomVersion}",
            roomRxJava     : "androidx.room:room-rxjava2:${roomVersion}"
    ]

    cacheTestDependencies = [
            junit           : "junit:junit:${jUnitVersion}",
            kotlinJUnit     : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            mockito         : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            assertj         : "org.assertj:assertj-core:${assertJVersion}",
            robolectric     : "org.robolectric:robolectric:${robolectricVersion}",
            roomTesting     : "androidx.room:room-testing:${roomVersion}",
            archTesting     : "androidx.arch.core:core-testing:${archVersion}",
            androidxTestCore: "androidx.test:core:${androidxTestCoreVersion}",
    ]

    presentationDependencies = [
            javaxAnnotation    : "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject        : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxKotlin           : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            kotlin             : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",
            rxAndroid          : "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}",
            androidxCoreKtx    : "androidx.core:core-ktx:${ktxVersion}",
            androidxAnnotations: "androidx.annotation:annotation:${androidxAnnotationsVersion}",
            lifecycleRuntime   : "androidx.lifecycle:lifecycle-runtime:${lifecycleVersion}",
            lifecycleExtensions: "androidx.lifecycle:lifecycle-extensions:${lifecycleVersion}",
            lifecycleCompiler  : "androidx.lifecycle:lifecycle-compiler:${lifecycleVersion}",
            roomRuntime        : "androidx.room:room-runtime:${roomVersion}",
            roomCompiler       : "androidx.room:room-compiler:${roomVersion}",
            roomRxJava         : "androidx.room:room-rxjava2:${roomVersion}",
            legacyV4           : "androidx.legacy:legacy-support-v4:${legacyVersion}",
            legacyV13          : "androidx.legacy:legacy-support-v13:${legacyVersion}",
            appCompat          : "androidx.appcompat:appcompat:${appcompatVersion}",
            recyclerView       : "androidx.recyclerview:recyclerview:${recyclerviewVersion}",
            constraintlayout   : "androidx.constraintlayout:constraintlayout:${constraintlayoutVersion}",
            material           : "com.google.android.material:material:${materialVersion}",
            dagger             : "com.google.dagger:dagger:${daggerVersion}",
            daggerCompiler     : "com.google.dagger:dagger-compiler:${daggerVersion}",
            daggerSupport      : "com.google.dagger:dagger-android-support:${daggerVersion}",
            daggerProcessor    : "com.google.dagger:dagger-android-processor:${daggerVersion}",
            timber             : "com.jakewharton.timber:timber:${timberVersion}",
            glide              : "com.github.bumptech.glide:glide:${glideVersion}"

    ]

    presentationTestDependencies = [
            junit          : "junit:junit:${jUnitVersion}",
            kotlinJUnit    : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            assertj        : "org.assertj:assertj-core:${assertJVersion}",
            mockito        : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoVersion}",
            mockitoAndroid : "org.mockito:mockito-android:${mockitoAndroidVersion}",
            robolectric    : "org.robolectric:robolectric:${robolectricVersion}",
            archTesting    : "androidx.arch.core:core-testing:${archVersion}",
            espressoCore   : "androidx.test.espresso:espresso-core:${espressoVersion}",
            espressoIntents: "androidx.test.espresso:espresso-intents:${espressoVersion}",
            espressoContrib: "androidx.test.espresso:espresso-contrib:${espressoVersion}",
            androidxRunner : "androidx.test:runner:${runnerVersion}",
            androidxRules  : "androidx.test:rules:${runnerVersion}"
    ]

}