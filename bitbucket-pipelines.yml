# from this link: https://community.atlassian.com/t5/Bitbucket-questions/How-to-setup-Pipelines-for-an-Android-app/qaq-p/424255

# This is a sample build configuration for Java (Gradle).
# Check our guides at https://confluence.atlassian.com/x/zd-5Mw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: java:8

definitions:
  caches:
    android-sdk: android-sdk

  steps:
    ##########  UPLOAD APK TO SLACK #CHANNEL ##########
    # SLACK_CHANNEL - Dev - upload apk file.
    - step: &SlackChannelUploadDevAPK
        name: Slack Channel Publish Dev APK
        script:
          - curl -F content="---Dev server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/dev/release/$FILE_NAME_DEV" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
    # SLACK_CHANNEL - Staging - upload apk file.
    - step: &SlackChannelUploadStagingAPK
        name: Slack Channel Publish Staging APK
        script:
          - curl -F content="---Staging server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/staging/release/$FILE_NAME_STAGING" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
    # SLACK_CHANNEL - Production - upload apk file.
    - step: &SlackChannelUploadProductionAPK
        name: Slack Channel Publish Production APK
        script:
          - curl -F content="---Production server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/production/release/$FILE_NAME_PRODUCTION" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
    ##########  UPLOAD APK TO SLACK #CHANNEL ##########

pipelines:
  branches:
    develop:
      - step:
          name: Init Environment & Build APK
          size: 2x # Double resources available for this step (eg. 4GB memory → 8GB memory).
          caches:
            - gradle
            - android-sdk
          script:
            # Download and unzip android sdk
            - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
            - unzip -o -qq android-sdk.zip -d android-sdk
            # Define Android Home
            - export ANDROID_HOME="/opt/atlassian/pipelines/agent/build/android-sdk"
            # Add PATHs
            - export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
            # Download packages.
            - yes | sdkmanager "platform-tools"
            - yes | sdkmanager "platforms;android-29"
            - yes | sdkmanager "build-tools;29.0.3"
            - yes | sdkmanager "extras;android;m2repository"
            - yes | sdkmanager "extras;google;m2repository"
            - yes | sdkmanager "extras;google;instantapps"
            - yes | sdkmanager --licenses
            # Build apk
            - chmod a+x ./gradlew
            #build the dev, staging and prod release APKs
            - ./gradlew appMobile:assembleDevRelease appMobile:assembleStagingRelease appMobile:assembleProductionRelease
            #Let's define the name of APKs that were built and variables
            - . ./setup_export.sh
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########
            # SLACK_CHANNEL - Dev - upload apk file.
            - curl -F content="---Dev server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/dev/release/$FILE_NAME_DEV" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            # SLACK_CHANNEL - Staging - upload apk file.
            - curl -F content="---Staging server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/staging/release/$FILE_NAME_STAGING" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            # SLACK_CHANNEL - Production - upload apk file.
            - curl -F content="---Production server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/production/release/$FILE_NAME_PRODUCTION" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########

    release/quality:
      - step:
          name: Init Environment & Build APK
          size: 2x # Double resources available for this step (eg. 4GB memory → 8GB memory).
          caches:
            - gradle
            - android-sdk
          script:
            # Download and unzip android sdk
            - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
            - unzip -o -qq android-sdk.zip -d android-sdk
            # Define Android Home
            - export ANDROID_HOME="/opt/atlassian/pipelines/agent/build/android-sdk"
            # Add PATHs
            - export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
            # Download packages.
            - yes | sdkmanager "platform-tools"
            - yes | sdkmanager "platforms;android-29"
            - yes | sdkmanager "build-tools;29.0.3"
            - yes | sdkmanager "extras;android;m2repository"
            - yes | sdkmanager "extras;google;m2repository"
            - yes | sdkmanager "extras;google;instantapps"
            - yes | sdkmanager --licenses
            # Build apk
            - chmod a+x ./gradlew
            #build the dev, staging and prod release APKs
            - ./gradlew appMobile:assembleDevRelease appMobile:assembleStagingRelease appMobile:appDistributionUploadDevRelease
            #Let's define the name of APKs that were built and variables
            - . ./setup_export.sh
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########
            # SLACK_CHANNEL - Dev - upload apk file.
            - curl -F content="---Dev server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/dev/release/$FILE_NAME_DEV" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            # SLACK_CHANNEL - Staging - upload apk file.
            - curl -F content="---Staging server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/staging/release/$FILE_NAME_STAGING" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########
    master:
      - step:
          name: Init Environment & Build APK
          size: 2x # Double resources available for this step (eg. 4GB memory → 8GB memory).
          caches:
            - gradle
            - android-sdk
          script:
            # Download and unzip android sdk
            - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
            - unzip -o -qq android-sdk.zip -d android-sdk
            # Define Android Home
            - export ANDROID_HOME="/opt/atlassian/pipelines/agent/build/android-sdk"
            # Add PATHs
            - export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
            # Download packages.
            - yes | sdkmanager "platform-tools"
            - yes | sdkmanager "platforms;android-29"
            - yes | sdkmanager "build-tools;29.0.3"
            - yes | sdkmanager "extras;android;m2repository"
            - yes | sdkmanager "extras;google;m2repository"
            - yes | sdkmanager "extras;google;instantapps"
            - yes | sdkmanager --licenses
            # Build apk
            - chmod a+x ./gradlew
            #build the dev, staging and prod release APKs
            - ./gradlew appMobile:assembleProductionRelease appMobile:appDistributionUploadProductionRelease
            #Let's define the name of APKs that were built and variables
            - . ./setup_export.sh
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########
            # SLACK_CHANNEL - Production - upload apk file.
            - curl -F content="---Production server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/production/release/$FILE_NAME_PRODUCTION" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            ##########  UPLOAD APK TO Google Play ##########
            #- ./gradlew publishBundle

  pull-requests:
    '{**,feature/*}': #'**': #this runs as default for any branch not elsewhere defined, #any branch with a feature prefix
      - step:
          name: Init Environment & Build APK
          size: 2x # Double resources available for this step (eg. 4GB memory → 8GB memory).
          caches:
            - gradle
            - android-sdk
          script:
            # Download and unzip android sdk
            - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
            - unzip -o -qq android-sdk.zip -d android-sdk
            # Define Android Home
            - export ANDROID_HOME="/opt/atlassian/pipelines/agent/build/android-sdk"
            # Add PATHs
            - export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
            # Download packages.
            - yes | sdkmanager "platform-tools"
            - yes | sdkmanager "platforms;android-29"
            - yes | sdkmanager "build-tools;29.0.3"
            - yes | sdkmanager "extras;android;m2repository"
            - yes | sdkmanager "extras;google;m2repository"
            - yes | sdkmanager "extras;google;instantapps"
            - yes | sdkmanager --licenses
            # Build apk
            - chmod a+x ./gradlew
            #build the dev, staging and prod release APKs
            - ./gradlew appMobile:assembleDevRelease appMobile:assembleStagingRelease appMobile:assembleProductionRelease
            #Let's define the name of APKs that were built and variables
            - . ./setup_export.sh
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########
            # SLACK_CHANNEL - Dev - upload apk file.
            - curl -F content="---Dev server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/dev/release/$FILE_NAME_DEV" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            # SLACK_CHANNEL - Staging - upload apk file.
            - curl -F content="---Staging server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/staging/release/$FILE_NAME_STAGING" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            # SLACK_CHANNEL - Production - upload apk file.
            - curl -F content="---Production server build, uploaded by bitbucket pipelines---" -F file=@"./appMobile/build/outputs/apk/production/release/$FILE_NAME_PRODUCTION" -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} https://slack.com/api/files.upload
            ##########  UPLOAD APK TO SLACK #CHANNEL ##########